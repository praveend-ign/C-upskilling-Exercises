        -:    0:Source:list.c
        -:    0:Graph:list.gcno
        -:    0:Data:list.gcda
        -:    0:Runs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include "item.h"
        -:    4:#include "list.h"
        -:    5:
       51:    6:link NEW(item key, link next) {
       51:    7:	link x = malloc(sizeof(*x));
       51:    8:	x->key = key;
       51:    9:	x->next = next;
       51:   10:	return x;
        -:   11:}
        -:   12:
    #####:   13:link list_max(link h) {
        -:   14:	link r;
        -:   15:	
    #####:   16:	for (r = h; h->next != NULL; h = h->next) {
    #####:   17:		if (item_less(r->next->key, h->next->key)) {
    #####:   18:			r = h;
        -:   19:		}
        -:   20:	}
        -:   21:	
    #####:   22:	return r;
        -:   23:}
        -:   24:
        1:   25:link list_init(int N) {
        -:   26:	int i;
        -:   27:	link x;
        -:   28:	
        1:   29:	x = NEW(item_rand(), NULL);
        -:   30:
       50:   31:	for (i = 1; i < N; ++i) {
       49:   32:		x = NEW(item_rand(), x);
        -:   33:	}
        -:   34:	
        1:   35:	x = NEW(item_dummy(), x);
        -:   36:	
        1:   37:	return x;
        -:   38:}
        -:   39:
        2:   40:void list_show(link h) {
        -:   41:	
      102:   42:	for (; h->next != NULL; h = h->next) {
      100:   43:		item_show(h->next->key);
        -:   44:	}
        -:   45:	
        2:   46:	printf("\n");
        2:   47:}
        -:   48:
        -:   49:////////////////////////
        -:   50:// MERGESORT ALGORITHMS
        -:   51:////////////////////////
        -:   52:
       50:   53:link list_merge(link a, link b) {
        -:   54:	struct node head;
       50:   55:	link c = &head;
        -:   56:	
      284:   57:	while ((a != NULL) && (b != NULL)) {
      234:   58:		if (item_less(a->key, b->key)) {
      125:   59:			c->next = a;
      125:   60:			c = a;
      125:   61:			a = a->next;
        -:   62:		} else {
      109:   63:			c->next = b;
      109:   64:			c = b;
      109:   65:			b = b->next;
        -:   66:		}
        -:   67:	}
       50:   68:	c->next = (a == NULL) ? b : a;
        -:   69:	
       50:   70:	return head.next;
        -:   71:}
        -:   72:
      101:   73:link list_mergesort(link c) {
        -:   74:	link a, b;
        -:   75:	
      101:   76:	if (c == NULL || c->next == NULL)
       51:   77:		return c;
        -:   78:	
       50:   79:	a = c;
       50:   80:	b = c->next;
        -:   81:	
      157:   82:	while ((b != NULL) && (b->next != NULL)) {
      107:   83:		c = c->next;
      107:   84:		b = b->next->next;
        -:   85:	}
        -:   86:	
       50:   87:	b = c->next;
       50:   88:	c->next = NULL;
        -:   89:	
       50:   90:	return list_merge(list_mergesort(a), list_mergesort(b));
        -:   91:}
